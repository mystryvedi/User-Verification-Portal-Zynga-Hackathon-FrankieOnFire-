# -*- coding: utf-8 -*-
"""Final_compile.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1tGIXlri2Uv82UoLIQb3bH2XIuluI5CIN
"""

# === SETUP ===
!apt-get update
!apt-get install -y tesseract-ocr poppler-utils
!pip install pytesseract opencv-python-headless Pillow PyMuPDF deepface pdf2image

import pytesseract
import cv2
import re
from datetime import datetime
from PIL import Image
import numpy as np
import fitz  # PyMuPDF
from deepface import DeepFace
from pdf2image import convert_from_path
from google.colab import files
import io
import os

# Download language data
languages = ['eng', 'hin', 'tam', 'tel', 'kan', 'mal']
for lang in languages:
    !wget -q https://github.com/tesseract-ocr/tessdata/raw/main/{lang}.traineddata
    !mv {lang}.traineddata /usr/share/tesseract-ocr/5/tessdata/

POPPLER_PATH = "/usr/bin"

# === HELPER FUNCTIONS ===
def preprocess_image(image):
    img = np.array(image)
    img = cv2.cvtColor(img, cv2.COLOR_RGB2BGR)
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    _, thresh = cv2.threshold(gray, 0, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    resized = cv2.resize(thresh, None, fx=1.5, fy=1.5, interpolation=cv2.INTER_LINEAR)
    return resized

def extract_text(image):
    lang_string = '+'.join(languages)
    return pytesseract.image_to_string(image, lang=lang_string)

def parse_aadhar_text(text):
    dob_pattern = r'\b(\d{2}[/-]\d{2}[/-]\d{4})\b'
    dob_match = re.search(dob_pattern, text)
    dob = dob_match.group(1) if dob_match else None
    return None, dob

def calculate_age(dob_str):
    formats = ['%d/%m/%Y', '%d-%m-%Y']
    for fmt in formats:
        try:
            dob = datetime.strptime(dob_str, fmt)
            today = datetime.today()
            age = today.year - dob.year - ((today.month, today.day) < (dob.month, dob.day))
            return age, age >= 18
        except:
            continue
    return None, None

# === MAIN FUNCTION ===
def main():
    print("Upload Aadhaar card (PDF or Image):")
    aadhaar_upload = files.upload()
    aadhaar_file = list(aadhaar_upload.keys())[0]

    # Convert Aadhaar file to image
    if aadhaar_file.lower().endswith(".pdf"):
        images = convert_from_path(aadhaar_file, dpi=300, poppler_path=POPPLER_PATH)
        aadhaar_image_path = "aadhaar_page1.png"
        images[0].save(aadhaar_image_path, "PNG")
    else:
        aadhaar_image_path = aadhaar_file

    image = Image.open(aadhaar_image_path)
    processed_image = preprocess_image(image)
    text = extract_text(processed_image)
    _, dob = parse_aadhar_text(text)

    if dob:
        age, is_adult = calculate_age(dob)
    else:
        age, is_adult = None, None

    print("\nOCR Results:")
    print("DOB:", dob if dob else "Not found")
    print("Age:", age if age is not None else "N/A")
    print("18+:", "Yes" if is_adult else "No")

    print("\nUpload Selfie:")
    selfie_upload = files.upload()
    selfie_image_path = list(selfie_upload.keys())[0]

    try:
        result = DeepFace.verify(
            img1_path=aadhaar_image_path,
            img2_path=selfie_image_path,
            model_name='VGG-Face',
            enforce_detection=False
        )
        similarity_score = 100 - (result['distance'] * 100)
        threshold = 50.0  # 50% match threshold

        print("\nFace Match Result:")
        print(f"Confidence Score: {similarity_score:.2f}%")

        if similarity_score >= threshold:
            print("✅ Faces Matched")
        else:
            print("❌ Faces Do Not Match")

    except Exception as e:
        print("Face verification error:", e)

main()
